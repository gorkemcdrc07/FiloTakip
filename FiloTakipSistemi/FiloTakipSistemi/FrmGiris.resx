<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureEdit1.EditValue" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        7fB/jpMWoOGWs6wAAAAASUVORK5CYII=
</value>
  </data>
</root>